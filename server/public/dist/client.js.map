{
  "version": 3,
  "sources": ["../../../node_modules/partysocket/dist/chunk-54YSQCE5.mjs", "../../../node_modules/partysocket/dist/chunk-4RHF3PCL.mjs", "../../src/client.ts"],
  "sourcesContent": ["// src/ws.ts\nif (!globalThis.EventTarget || !globalThis.Event) {\n  console.error(`\n  PartySocket requires a global 'EventTarget' class to be available!\n  You can use the 'event-target-shim' package to polyfill this. See https://www.npmjs.com/package/event-target-shim. \n  First, run:\n  \\`\\`\\`\n  npm install event-target-shim\n  \\`\\`\\`\n  Then, add this in your code:\n  \\`\\`\\`\n  import {Event, EventTarget} from 'event-target-shim';\n  if(!globalThis.Event) {\n    globalThis.Event = Event;\n  }\n  if(!globalThis.EventTarget) {\n    globalThis.EventTarget = EventTarget;\n  }\n  \\`\\`\\`\n  Please file an issue at https://github.com/partykit/partykit if you're still having trouble.\n`);\n}\nvar ErrorEvent = class extends Event {\n  message;\n  error;\n  constructor(error, target) {\n    super(\"error\", target);\n    this.message = error.message;\n    this.error = error;\n  }\n};\nvar CloseEvent = class extends Event {\n  code;\n  reason;\n  wasClean = true;\n  constructor(code = 1e3, reason = \"\", target) {\n    super(\"close\", target);\n    this.code = code;\n    this.reason = reason;\n  }\n};\nvar Events = {\n  Event,\n  ErrorEvent,\n  CloseEvent\n};\nfunction assert(condition, msg) {\n  if (!condition) {\n    throw new Error(msg);\n  }\n}\nfunction cloneEvent(e) {\n  return new e.constructor(e.type, e);\n}\nvar DEFAULT = {\n  maxReconnectionDelay: 1e4,\n  minReconnectionDelay: 1e3 + Math.random() * 4e3,\n  minUptime: 5e3,\n  reconnectionDelayGrowFactor: 1.3,\n  connectionTimeout: 4e3,\n  maxRetries: Infinity,\n  maxEnqueuedMessages: Infinity,\n  startClosed: false,\n  debug: false\n};\nvar ReconnectingWebSocket = class _ReconnectingWebSocket extends EventTarget {\n  _ws;\n  _retryCount = -1;\n  _uptimeTimeout;\n  _connectTimeout;\n  _shouldReconnect = true;\n  _connectLock = false;\n  _binaryType = \"blob\";\n  _closeCalled = false;\n  _messageQueue = [];\n  _url;\n  _protocols;\n  _options;\n  constructor(url, protocols, options = {}) {\n    super();\n    this._url = url;\n    this._protocols = protocols;\n    this._options = options;\n    if (this._options.startClosed) {\n      this._shouldReconnect = false;\n    }\n    this._connect();\n  }\n  static get CONNECTING() {\n    return 0;\n  }\n  static get OPEN() {\n    return 1;\n  }\n  static get CLOSING() {\n    return 2;\n  }\n  static get CLOSED() {\n    return 3;\n  }\n  get CONNECTING() {\n    return _ReconnectingWebSocket.CONNECTING;\n  }\n  get OPEN() {\n    return _ReconnectingWebSocket.OPEN;\n  }\n  get CLOSING() {\n    return _ReconnectingWebSocket.CLOSING;\n  }\n  get CLOSED() {\n    return _ReconnectingWebSocket.CLOSED;\n  }\n  get binaryType() {\n    return this._ws ? this._ws.binaryType : this._binaryType;\n  }\n  set binaryType(value) {\n    this._binaryType = value;\n    if (this._ws) {\n      this._ws.binaryType = value;\n    }\n  }\n  /**\n   * Returns the number or connection retries\n   */\n  get retryCount() {\n    return Math.max(this._retryCount, 0);\n  }\n  /**\n   * The number of bytes of data that have been queued using calls to send() but not yet\n   * transmitted to the network. This value resets to zero once all queued data has been sent.\n   * This value does not reset to zero when the connection is closed; if you keep calling send(),\n   * this will continue to climb. Read only\n   */\n  get bufferedAmount() {\n    const bytes = this._messageQueue.reduce((acc, message) => {\n      if (typeof message === \"string\") {\n        acc += message.length;\n      } else if (message instanceof Blob) {\n        acc += message.size;\n      } else {\n        acc += message.byteLength;\n      }\n      return acc;\n    }, 0);\n    return bytes + (this._ws ? this._ws.bufferedAmount : 0);\n  }\n  /**\n   * The extensions selected by the server. This is currently only the empty string or a list of\n   * extensions as negotiated by the connection\n   */\n  get extensions() {\n    return this._ws ? this._ws.extensions : \"\";\n  }\n  /**\n   * A string indicating the name of the sub-protocol the server selected;\n   * this will be one of the strings specified in the protocols parameter when creating the\n   * WebSocket object\n   */\n  get protocol() {\n    return this._ws ? this._ws.protocol : \"\";\n  }\n  /**\n   * The current state of the connection; this is one of the Ready state constants\n   */\n  get readyState() {\n    if (this._ws) {\n      return this._ws.readyState;\n    }\n    return this._options.startClosed ? _ReconnectingWebSocket.CLOSED : _ReconnectingWebSocket.CONNECTING;\n  }\n  /**\n   * The URL as resolved by the constructor\n   */\n  get url() {\n    return this._ws ? this._ws.url : \"\";\n  }\n  /**\n   * Whether the websocket object is now in reconnectable state\n   */\n  get shouldReconnect() {\n    return this._shouldReconnect;\n  }\n  /**\n   * An event listener to be called when the WebSocket connection's readyState changes to CLOSED\n   */\n  onclose = null;\n  /**\n   * An event listener to be called when an error occurs\n   */\n  onerror = null;\n  /**\n   * An event listener to be called when a message is received from the server\n   */\n  onmessage = null;\n  /**\n   * An event listener to be called when the WebSocket connection's readyState changes to OPEN;\n   * this indicates that the connection is ready to send and receive data\n   */\n  onopen = null;\n  /**\n   * Closes the WebSocket connection or connection attempt, if any. If the connection is already\n   * CLOSED, this method does nothing\n   */\n  close(code = 1e3, reason) {\n    this._closeCalled = true;\n    this._shouldReconnect = false;\n    this._clearTimeouts();\n    if (!this._ws) {\n      this._debug(\"close enqueued: no ws instance\");\n      return;\n    }\n    if (this._ws.readyState === this.CLOSED) {\n      this._debug(\"close: already closed\");\n      return;\n    }\n    this._ws.close(code, reason);\n  }\n  /**\n   * Closes the WebSocket connection or connection attempt and connects again.\n   * Resets retry counter;\n   */\n  reconnect(code, reason) {\n    this._shouldReconnect = true;\n    this._closeCalled = false;\n    this._retryCount = -1;\n    if (!this._ws || this._ws.readyState === this.CLOSED) {\n      this._connect();\n    } else {\n      this._disconnect(code, reason);\n      this._connect();\n    }\n  }\n  /**\n   * Enqueue specified data to be transmitted to the server over the WebSocket connection\n   */\n  send(data) {\n    if (this._ws && this._ws.readyState === this.OPEN) {\n      this._debug(\"send\", data);\n      this._ws.send(data);\n    } else {\n      const { maxEnqueuedMessages = DEFAULT.maxEnqueuedMessages } = this._options;\n      if (this._messageQueue.length < maxEnqueuedMessages) {\n        this._debug(\"enqueue\", data);\n        this._messageQueue.push(data);\n      }\n    }\n  }\n  _debug(...args) {\n    if (this._options.debug) {\n      console.log.apply(console, [\"RWS>\", ...args]);\n    }\n  }\n  _getNextDelay() {\n    const {\n      reconnectionDelayGrowFactor = DEFAULT.reconnectionDelayGrowFactor,\n      minReconnectionDelay = DEFAULT.minReconnectionDelay,\n      maxReconnectionDelay = DEFAULT.maxReconnectionDelay\n    } = this._options;\n    let delay = 0;\n    if (this._retryCount > 0) {\n      delay = minReconnectionDelay * Math.pow(reconnectionDelayGrowFactor, this._retryCount - 1);\n      if (delay > maxReconnectionDelay) {\n        delay = maxReconnectionDelay;\n      }\n    }\n    this._debug(\"next delay\", delay);\n    return delay;\n  }\n  _wait() {\n    return new Promise((resolve) => {\n      setTimeout(resolve, this._getNextDelay());\n    });\n  }\n  _getNextProtocols(protocolsProvider) {\n    if (!protocolsProvider)\n      return Promise.resolve(null);\n    if (typeof protocolsProvider === \"string\" || Array.isArray(protocolsProvider)) {\n      return Promise.resolve(protocolsProvider);\n    }\n    if (typeof protocolsProvider === \"function\") {\n      const protocols = protocolsProvider();\n      if (!protocols)\n        return Promise.resolve(null);\n      if (typeof protocols === \"string\" || Array.isArray(protocols)) {\n        return Promise.resolve(protocols);\n      }\n      if (protocols.then) {\n        return protocols;\n      }\n    }\n    throw Error(\"Invalid protocols\");\n  }\n  _getNextUrl(urlProvider) {\n    if (typeof urlProvider === \"string\") {\n      return Promise.resolve(urlProvider);\n    }\n    if (typeof urlProvider === \"function\") {\n      const url = urlProvider();\n      if (typeof url === \"string\") {\n        return Promise.resolve(url);\n      }\n      if (url.then) {\n        return url;\n      }\n    }\n    throw Error(\"Invalid URL\");\n  }\n  _connect() {\n    if (this._connectLock || !this._shouldReconnect) {\n      return;\n    }\n    this._connectLock = true;\n    const {\n      maxRetries = DEFAULT.maxRetries,\n      connectionTimeout = DEFAULT.connectionTimeout\n    } = this._options;\n    if (this._retryCount >= maxRetries) {\n      this._debug(\"max retries reached\", this._retryCount, \">=\", maxRetries);\n      return;\n    }\n    this._retryCount++;\n    this._debug(\"connect\", this._retryCount);\n    this._removeListeners();\n    this._wait().then(\n      () => Promise.all([\n        this._getNextUrl(this._url),\n        this._getNextProtocols(this._protocols || null)\n      ])\n    ).then(([url, protocols]) => {\n      if (this._closeCalled) {\n        this._connectLock = false;\n        return;\n      }\n      this._debug(\"connect\", { url, protocols });\n      this._ws = protocols ? new WebSocket(url, protocols) : new WebSocket(url);\n      this._ws.binaryType = this._binaryType;\n      this._connectLock = false;\n      this._addListeners();\n      this._connectTimeout = setTimeout(\n        () => this._handleTimeout(),\n        connectionTimeout\n      );\n    }).catch((err) => {\n      this._connectLock = false;\n      this._handleError(new Events.ErrorEvent(Error(err.message), this));\n    });\n  }\n  _handleTimeout() {\n    this._debug(\"timeout event\");\n    this._handleError(new Events.ErrorEvent(Error(\"TIMEOUT\"), this));\n  }\n  _disconnect(code = 1e3, reason) {\n    this._clearTimeouts();\n    if (!this._ws) {\n      return;\n    }\n    this._removeListeners();\n    try {\n      this._ws.close(code, reason);\n      this._handleClose(new Events.CloseEvent(code, reason, this));\n    } catch (error) {\n    }\n  }\n  _acceptOpen() {\n    this._debug(\"accept open\");\n    this._retryCount = 0;\n  }\n  _handleOpen = (event) => {\n    this._debug(\"open event\");\n    const { minUptime = DEFAULT.minUptime } = this._options;\n    clearTimeout(this._connectTimeout);\n    this._uptimeTimeout = setTimeout(() => this._acceptOpen(), minUptime);\n    assert(this._ws, \"WebSocket is not defined\");\n    this._ws.binaryType = this._binaryType;\n    this._messageQueue.forEach((message) => this._ws?.send(message));\n    this._messageQueue = [];\n    if (this.onopen) {\n      this.onopen(event);\n    }\n    this.dispatchEvent(cloneEvent(event));\n  };\n  _handleMessage = (event) => {\n    this._debug(\"message event\");\n    if (this.onmessage) {\n      this.onmessage(event);\n    }\n    this.dispatchEvent(cloneEvent(event));\n  };\n  _handleError = (event) => {\n    this._debug(\"error event\", event.message);\n    this._disconnect(\n      void 0,\n      event.message === \"TIMEOUT\" ? \"timeout\" : void 0\n    );\n    if (this.onerror) {\n      this.onerror(event);\n    }\n    this._debug(\"exec error listeners\");\n    this.dispatchEvent(cloneEvent(event));\n    this._connect();\n  };\n  _handleClose = (event) => {\n    this._debug(\"close event\");\n    this._clearTimeouts();\n    if (this._shouldReconnect) {\n      this._connect();\n    }\n    if (this.onclose) {\n      this.onclose(event);\n    }\n    this.dispatchEvent(cloneEvent(event));\n  };\n  _removeListeners() {\n    if (!this._ws) {\n      return;\n    }\n    this._debug(\"removeListeners\");\n    this._ws.removeEventListener(\"open\", this._handleOpen);\n    this._ws.removeEventListener(\"close\", this._handleClose);\n    this._ws.removeEventListener(\"message\", this._handleMessage);\n    this._ws.removeEventListener(\"error\", this._handleError);\n  }\n  _addListeners() {\n    if (!this._ws) {\n      return;\n    }\n    this._debug(\"addListeners\");\n    this._ws.addEventListener(\"open\", this._handleOpen);\n    this._ws.addEventListener(\"close\", this._handleClose);\n    this._ws.addEventListener(\"message\", this._handleMessage);\n    this._ws.addEventListener(\"error\", this._handleError);\n  }\n  _clearTimeouts() {\n    clearTimeout(this._connectTimeout);\n    clearTimeout(this._uptimeTimeout);\n  }\n};\n\nexport {\n  ErrorEvent,\n  CloseEvent,\n  ReconnectingWebSocket\n};\n/*!\n * Reconnecting WebSocket\n * by Pedro Ladaria <pedro.ladaria@gmail.com>\n * https://github.com/pladaria/reconnecting-websocket\n * License MIT\n */\n", "import {\n  ReconnectingWebSocket\n} from \"./chunk-54YSQCE5.mjs\";\n\n// src/index.ts\nfunction generateUUID() {\n  if (typeof crypto !== \"undefined\" && crypto.randomUUID) {\n    return crypto.randomUUID();\n  }\n  let d = (/* @__PURE__ */ new Date()).getTime();\n  let d2 = typeof performance !== \"undefined\" && performance.now && performance.now() * 1e3 || 0;\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\n    let r = Math.random() * 16;\n    if (d > 0) {\n      r = (d + r) % 16 | 0;\n      d = Math.floor(d / 16);\n    } else {\n      r = (d2 + r) % 16 | 0;\n      d2 = Math.floor(d2 / 16);\n    }\n    return (c === \"x\" ? r : r & 3 | 8).toString(16);\n  });\n}\nvar PartySocket = class extends ReconnectingWebSocket {\n  constructor(partySocketOptions) {\n    const {\n      host: rawHost,\n      room,\n      party,\n      protocol,\n      query,\n      protocols,\n      ...socketOptions\n    } = partySocketOptions;\n    const _pk = partySocketOptions.id || generateUUID();\n    const host = rawHost.replace(/^(http|https|ws|wss):\\/\\//, \"\");\n    let url = `${protocol || (host.startsWith(\"localhost:\") || host.startsWith(\"127.0.0.1:\") ? \"ws\" : \"wss\")}://${host}/${party ? `parties/${party}` : \"party\"}/${room}`;\n    if (query) {\n      url += `?${new URLSearchParams({ ...query, _pk }).toString()}`;\n    } else {\n      url += `?_pk=${_pk}`;\n    }\n    super(url, protocols, socketOptions);\n    this.partySocketOptions = partySocketOptions;\n    this._pk = _pk;\n  }\n  _pk;\n  get id() {\n    return this._pk;\n  }\n};\n\nexport {\n  PartySocket\n};\n", "import './styles.css';\n\nimport PartySocket from 'partysocket';\n\ndeclare const PARTYKIT_HOST: string;\n\n// Let's append all the messages we get into this DOM element\nconst output = document.getElementById('app') as HTMLDivElement;\n\n// Helper function to add a new line to the DOM\nfunction add(text: string) {\n  output.appendChild(document.createTextNode(text));\n  output.appendChild(document.createElement('br'));\n}\n\n// A PartySocket is like a WebSocket, except it's a bit more magical.\n// It handles reconnection logic, buffering messages while it's offline, and more.\nconst conn = new PartySocket({\n  host: PARTYKIT_HOST,\n  room: 'queue',\n  id: 'web-client',\n});\n\n// You can even start sending messages before the connection is open!\nconn.addEventListener('message', event => {\n  const message = JSON.parse(event.data);\n  switch (message.type) {\n    case 'hello':\n    case 'join':\n    case 'leave':\n    case 'ping':\n      add(`${message.message}`);\n      break;\n    case 'sync':\n      add(`Players in the queue: ${Object.keys(message.players).join(', ')}`);\n      break;\n    default:\n      add(`Received message: ${event.data}`);\n      break;\n  }\n});\n\n// Let's listen for when the connection opens\n// And send a ping every 2 seconds right after\nconn.addEventListener('open', () => {\n  add('Connected!');\n  add('Sending a ping every 2 seconds...');\n  // TODO: make this more interesting / nice\n  setInterval(() => {\n    conn.send(JSON.stringify({type: 'ping', message: 'ping from web client'}));\n  }, 2000);\n});\n"],
  "mappings": "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",
  "names": []
}
